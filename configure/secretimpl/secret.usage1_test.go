package secretimpl_test

import (
	"database/sql"
	"encoding/hex"
	"errors"
	"os"
	"testing"

	"github.com/spf13/afero"

	"github.com/meidoworks/nekoq-component/configure/secret"
	"github.com/meidoworks/nekoq-component/configure/secretapi"
	"github.com/meidoworks/nekoq-component/configure/secretimpl"
	"github.com/meidoworks/nekoq-component/utility/random"
)

var (
	prekey = "7b22616573323536223a22526f425a4b794c4952444a5755554e55426f68302f3266676845684850356e6a446579627a6f3172314d553d222c226372635f616573323536223a226565393566393664222c227273615f34303936223a224c5330744c5331435255644a546942535530456755464a4a566b46555253424c52566b744c5330744c51704e53556c4b5331464a516b464253304e425a305642656e6333566a6b795643397759327044576d686a55567042596e7034546d4a44536e564f596d453059556c4b5345563662585131637a56685930527955575670436b6b35656e4530533256516548566e5a6c417a5a47646b4b7a686863484277516b4a4f593264424e7a5178544464525246557a6258566c5255786b4f58706e59565a7a5648425052475a3653553542526b317862336b4b4e6d4a47627a5a4759545133553064685648565052564134536a5a6161315648524778794c3270744d7a4e574f537431613249355230684a52574a6d516c5252525849335a7a5a6b576d30774e6a5674526e464362776f32516d4e5a616d704f524573785633686a62793834536d68494e3255784e55647356545a754b33425454546778646a6431547a4e756558526c546e5a435a454e494e564a785a5752584e6b5a4852485a6e4f484245436c523559304532595756754d316c455a5545325654466b52566c57536a4271635767726179746f656b686e5a4442484d46493554565a6a5454566b5257637a6257357a51564e4d52327475656a467152334e4e5930304b61555a735647704e56455235574535306345467755584a5452444a6f4e324a79626a6471646a6831626e42484d6d64334e6d5a6b6179396963464a58634770344e43383462476f334e546868516c4253574845765a67706b5533464557546b77576a526b53336833636d31784e306776626c70544e32706b5332463361464258576e4972636b64454e6d4e546447786a61336330644670485a3039735645317152304e6a4c335a6f566d5673436e707656585a4b61544d324e6b4a464f544a514e58643254314a7156325a34616b355a6347394a61446c6a5645467a647a52736145597a5454465552544e4c61566c685258527a5657784f646e686f646c63325a57734b56456470596e63794f464e77597a55326556677a5a48645a4e6b646e523046434d324a3254556c7465565633626a424a613356435a6d526f6348464c576e687563456c71537a523051334e78626c6c6a55315a755a41706c634735496558564c57564a5952484a6d5133707164544a4b52453135567a6c4a5647684453564e7661577778546a5a61576c6c4a593142725a326c6a4d335247597a42734c30566f65467047636b74435279746e436c70346254426e553255305247564d5131527a4c797433576b4a6b635735715a546c725654426955557330595764775554457a5647354a526a5634574339595a6d786a4e6a6c6a626e565451305272513046335255454b5156464c5130466e516b5a594f4442724d557833636b4e69596b6c705a46637252475531517a6b77625670355a6d5277593164325543746d567a4a594b335a52616d744d57454e4a567a423562556c514d7a46534d676f32626b773565584a31556e4d315656565855445a4d4e5846425a466c504f57784461315a4d516b74335230313652544e72576a5a53616974336330677254476445576b7452556c4e4b526a4674525445314d476c54436d56324d697471546b4a5663456b316355566163465179554446704f5656724e45316e55455a6157474a545432686d516c68534c314e445154564961584e5364455245547a68535557466f54456c32574846546245734b5447453052573174566a64524b7a687261557051556d787a59305a58516e68616446647652484a6e536b707561584e764e6b4676536d78786355394a4e6c4236517938354d45467854456430523152454e556f32524170336347566e566c463365445633526c52616131526c55557849623270715a55307657554e3265433950576b5a7064484e36655756454e31467863486477626b744455545a615655526d5458597852565a4465554674436b315165446c534f446b34525777785346677965466379576d3569627a5972633352534e475235646c64466357684c5432464b64566b3161315255516c4e525155684d5631646c636e42755a325674596d645a6144554b526b6b306230397061573547656939796253396e596b30344f4531744f546c565445464c574856495253744e646e4935596b5a6e526a5245625656734e6c52534d6e464664544931576a4e355a4652734e47527a5a417070656d78534d307871536c4e5153303034636b35525547524f53484d7a62484e705645706d53564657566b55784c3064706446706c6230745764315a614f454e36656b743253555a794e5374305a46704b57475978436d70424d6c4e424e55396f63457454546d705a61484a6a52565a5455466733526b5533536c704d59564249566b52496245564f4e456c514f56703154307475536d68454e444e71575552325a6c70754d334231596d774b4d325a6d5346525a624468785330705457444a425346687a566e5979566e6c7a626a63774b315a515753747055325a55566b4a4f624746535a3064505a30394d51585a51566a4932623141784d6d553552584e3452416f7651305a424d315176656e4668556b525753306c4a626b565a65456c4e59307861536c4e305a4863765a584d31566e6857526b6c46525731534c323554526c4a3155557444515646465154424c4d6b4e4353473556436a4635656b786d5a546c6e51566f3353324a505255354f5533424859307045595770474c79746c5258527555336c7556306443576e41794e43746a4f584e6f6147686b4e326475616b7455617a4a7a4d43746d566e414b57576c6e53323172563149344b334d355247787253446c5461314649656b6457617a4257546d6b775457684e5933566e4d453168513078324b30745065556f354e6b6861616a4a59633239565933463364456c365451704f5a566832547a5a61646d56595645524f4f464677596d644d5658523265585249556d7832576c6c686258423052484a4d4c3030314d3031514d4770554d6e564b5a6d3033596c707659334a53576e567363315236436b6853616a4a4a557a566855484d34656b56474d565a726345743163553944566a46784e564a6b4b315a4656575a4b4e574931656a6c57625642534e46684a545745354b3239684d3156436233566f6448644c5679384b63585234636a684b576b4a3564325a71623039364d79744a596b5a475953746f4e544a7a56455a42535734794e6b394b4d6a46495345704e51546b79635770594e577843636d677a597a5935636e4d35596b30335151704456476778546e646b617a4e785531526f64307444515646465153396e546b74324e324a555a545a6c625449326256686d4c327036656c4a455a7a64474e544a6f52466c71656c5a576455706e4b7939694e465669436c64615579745452555a52623235725a58643554475a34546b4a3357693957543351795333684c62455534556c64695953744d4f484e325356465555455a4e626b78794e586c354f444e4c5754684f546e524b616e454b53305a494b7a6376597a64774d474a6f4c336843515646615555356e61464e6155456b314e307447615768355a576c485932643653307732576e5a705753746e554846456444644f64473131553052305a304671537770455a303150566e6c5a4d576f32554374555a58425a626d78734f5645764e4670705a5441766258593356575533626e5a7263466f346133524a4f44645a656c4a35576b784465554e314b33704c5347746e55585656436d3135596b78435655523255315231567a63765a5468504e6a6c5557473168624756424c304e42516e46745469746956476c45646d3479616d5a4c543263314e46424e593368525233704e59334e595a32466d64444d4b576b4d335a30343063474e7254314e4d5932744a5a693834536a593156537377574531684e326432513346566355394c51324e4d4d6c423353304e4255554a4c644778535a57786c51556454614852345454427a5251705457444e6e5246704f56533961574574774e556c5964304e68656d313364566c6b576d39615a4746365a7a45775358706c5548463462544a4c51564656644773355346553353314677595546726430706d4b7a684b436d70685a55646e4e4730354d55777a575464554c306c526269394a4e55686d4d6b4a43626b687759334a745630316b4f446c4b556e5a79616b394362325932526d6c71556b6f345244684e4e314530513070566554414b516a52494f574a5757556735553356455a55645161576f77517a5934545574774e58684d546c56434c325a566357737751306473576c67785a327075576b637965485273516c5669536c704e536a5a316333424954516f7265456c7355574e5763475a50636d4a314f4870774d5373725245706863566c55526938354c326334566a5634597a463552575132546a6c47637a55324f544a55516b557659304a6f4d324a42543170574e307474436e4274556e684e56316f79636b6c755647646b576b357953304a6e51566c5856485269523252325230633057484a3252327869656a4977545646314f554a7351565255624739334d7a423065693945626d6c305758454b5a3068496545467653554a425555524e626a4a61526e70725a6b784a6555566b596e673362557874654734774e6b77356148424e4b334672576e4246546e4a7a6457773361585a594d584e3563454648633039694b7770484d47645864476b3551545234524574456157706b5547687464555977596c46505954464a523039724d6a5934576a644a516d7372576b70726147464c5556526d59546c4b5548457a557a4256636d357252326836436e527564336f356357787a635842484c307472656c424b576b4534656d70734d6a557955444979513345764b7939734e5339565469396a5245493256446433543264745356466b5156466f51316c4665444d77646d6b4b596b6f355a484e4f65544a76655868324e6a4e42656c5a6d5631704d536b394d53554a3253556c4a5754457952484a52645778494f57466a595652695a6d39454e6e41326153396c637a4a74553256515257564a65417052624731354f47645462584176555730315a466444556b59356348466e4e47647361325a30556c4e555a53737a576d704662576f78646c4a72526a56344f5552715a6d5a6a53306c45616b745a5a6d67355a32356d436d683065444a7953306c50596b644c534373304f444535596d3477534445354d58523065484653537a524f5157394a516b46525130387755307879636a4a756555466e4d6a5a6b6554633157486c5a613067324f45494b596d517a5448524d5357314e5a6d64344d33683264575a49555664764d6a5a3155445233654564316347684b646a4a4e53445135566b397559307046566e557652576b7a566a5a5a4e46703163445658597a4a475741706f6132356a5a446c77576d787653464a3655457068566b6436526b4e7955457776566b39525131426f516d7451534574314d57513365566c33544845305345395a4e6d6c4a556d527157586b775344525161466871436c6c4863474a61516a68725447784555544e75615545314b336b345655314e536d785854446c31654373326433553464465a30516e467655336c4a536c68354f57463154555a324e45686f56544647535539535133674b643031316447786e644642335558464256445a43536c6f7951564a554e466452556b4a494d48464e596b46764f5764785130645565573161556b5933545756704d58567557475647575467725a6c4633546c56694f51704a636a566f5257704d636e647157484648646e6f3063554e3463334e555554646c4d6c4e4e5954563065475679556e56764f553142656b64756457745a5754413259697474636a6c5251305a745431514b4c5330744c533146546b5167556c4e424946425353565a42564555675330565a4c5330744c53304b222c226372635f7273615f34303936223a226630656433373333222c2265636473615f70353231223a224c5330744c5331435255644a5469424651794251556b6c575156524649457446575330744c533074436b314a53474e425a305643516b564a516d70335a4739784d31524e556a68694e6c4a7853545277546b593465576c56625768575547746d526d787451584535644451785257525965486c6e616c4259576e46444d47304b616e644f4d6d4659535768425979745064575675555649355748424b6245746c4e46464962574e775653744954445a6e516e645a526b7330525556425130396f5a316c725247645a575546435155644b4f4456366277703655464172593351725a6e4a766333706f536a4275616b683565464e6e59556b34646d6c774e334530656c59785a554a6e636d31564d575a4952586435546d4e43616b5a79566d52785a565a565646647151693932436d524e54326448566d46544e6b6445526b566a5a326858643067306454424b4c31526b4e4735715347523259576c77576a49314d45307259797372575731706155646d5a6b70774e6d70705a466c7863454e795133494b553356354f584a5354564673626d746151574a475a6a5252566a467561484a706454684257573155536e64454d557035526c464f5543396e5054304b4c5330744c533146546b516752554d6755464a4a566b46555253424c52566b744c5330744c516f3d222c226372635f65636473615f70353231223a223233656539333038222c22656432353531395f707269223a22686961486c357a56697549614e546d535a4d31386845356d30554174344f444c5070747349704a49796d4d3d222c226372635f656432353531395f707269223a223165306135303135222c22656432353531395f707562223a222b63766e51595462504d6465464a376a74326a756f694743425130723279796b5451774b63746350474d79474a6f65586e4e574b34686f314f5a4a6b7a587945546d625251433367344d732b6d3277696b6b6a4b59773d3d222c226372635f656432353531395f707562223a223264366439613262227d"
)

var (
	pgurl = "postgres://admin:admin@192.168.1.111:15432/onlyconfig"
)

func InitSecretFileInFs(fs afero.Fs) {
	f, err := fs.OpenFile("bootstrap.key", os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0600)
	if err != nil {
		panic(err)
	}
	defer func(f afero.File) {
		err := f.Close()
		if err != nil {
			panic(err)
		}
	}(f)

	data, err := hex.DecodeString(prekey)
	if err != nil {
		panic(err)
	}
	_, err = f.Write(data)
	if err != nil {
		panic(err)
	}
}

func InitTestKeyStorage(t *testing.T) secretapi.KeyStorage {
	fs := afero.NewMemMapFs()
	InitSecretFileInFs(fs)
	iofs := afero.NewIOFS(fs)

	// init UnsealProvider
	provider, err := secret.NewLocalFileUnsealProvider(iofs, map[int64]string{
		1: "bootstrap.key",
	})
	if err != nil {
		t.Fatal(err)
	}

	// init KeyStorage
	keyStorage, err := secretimpl.NewPostgresKeyStorage(pgurl)
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.Startup(); err != nil {
		t.Fatal(err)
	}

	// setup KeyStorage including unseal the KeyStorage
	if err := keyStorage.SetupUnsealProviderAndWait(provider); err != nil {
		t.Fatal(err)
	}
	return keyStorage
}

func TestSecretInit(t *testing.T) {
	// ensure database is empty
	db, err := sql.Open("pgx", pgurl)
	if err != nil {
		t.Fatal(err)
	}
	defer func(db *sql.DB) {
		err := db.Close()
		if err != nil {
			panic(err)
		}
	}(db)
	r, err := db.Exec("delete from secret_level1")
	if err != nil {
		t.Fatal(err)
	}
	if n, err := r.RowsAffected(); err != nil {
		t.Fatal(err)
	} else {
		t.Log("clean:", n, "row(s)")
	}

	fs := afero.NewMemMapFs()
	InitSecretFileInFs(fs)
	iofs := afero.NewIOFS(fs)

	// init UnsealProvider
	provider, err := secret.NewLocalFileUnsealProvider(iofs, map[int64]string{
		1: "bootstrap.key",
	})
	if err != nil {
		t.Fatal(err)
	}

	// init KeyStorage
	keyStorage, err := secretimpl.NewPostgresKeyStorage(pgurl)
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.Startup(); err != nil {
		t.Fatal(err)
	}

	// setup KeyStorage including unseal the KeyStorage
	if err := keyStorage.SetupUnsealProviderAndWait(provider); err != nil {
		t.Fatal(err)
	}
}

func TestSecretStartFromExisting(t *testing.T) {
	fs := afero.NewMemMapFs()
	InitSecretFileInFs(fs)
	iofs := afero.NewIOFS(fs)

	// init UnsealProvider
	provider, err := secret.NewLocalFileUnsealProvider(iofs, map[int64]string{
		1: "bootstrap.key",
	})
	if err != nil {
		t.Fatal(err)
	}

	// init KeyStorage
	keyStorage, err := secretimpl.NewPostgresKeyStorage(pgurl)
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.Startup(); err != nil {
		t.Fatal(err)
	}

	// setup KeyStorage including unseal the KeyStorage
	if err := keyStorage.SetupUnsealProviderAndWait(provider); err != nil {
		t.Fatal(err)
	}
}

func TestStoreLevel1KeySet(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)

	l1Key := random.String(10)

	ks, err := secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel1KeySet(l1Key, ks); err != nil {
		t.Fatal(err)
	}

	ks2, err := secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel1KeySet(l1Key, ks2); err != nil {
		t.Fatal(err)
	}
}

func TestPostgresKeyStorage_LoadLevel1KeySet(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)

	kid, ks, err := keyStorage.(*secretimpl.PostgresKeyStorage).LoadLevel1KeySet("____non_exist____")
	if !errors.Is(err, secretapi.ErrNoSuchKey) {
		t.Fatal("should report no such key error")
	}

	t.Log(kid, ks)

	ks, err = secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel1KeySet("test_case", ks); err != nil {
		t.Fatal(err)
	}

	kid, ks, err = keyStorage.(*secretimpl.PostgresKeyStorage).LoadLevel1KeySet("test_case")
	if err != nil {
		t.Fatal(err)
	}
	if ks == nil {
		t.Fatal("keyset is nil")
	}

	t.Log(kid, ks)
}

func TestPostgresKeyStorage_StoreLevel2KeySet(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)

	l1key := "test_case"
	l2key := random.String(10)

	ks, err := secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel2KeySet(l1key, "test_case", ks); err != nil {
		t.Fatal(err)
	}

	ks, err = secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel2KeySet(l1key, l2key, ks); err != nil {
		t.Fatal(err)
	}

	ks, err = secretapi.DefaultKeyGen.GenerateVitalKeySet()
	if err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreLevel2KeySet(l1key, l2key, ks); err != nil {
		t.Fatal(err)
	}

}

func TestPostgresKeyStorage_FetchLevel2KeySet(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)
	l2key := "test_case"

	keyId, ks, err := keyStorage.FetchLevel2KeySet(l2key)
	if err != nil {
		t.Fatal(err)
	}
	if keyId == 0 {
		t.Fatal("key id is zero")
	}
	if ks == nil {
		t.Fatal("keyset is nil")
	}
	if !ks.VerifyCrc() {
		t.Fatal("keyset crc failed")
	}
}

func TestPostgresKeyStorage_StoreL2DataKey(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)
	l1key := "test_case"
	l2key := random.String(10)
	key, err := secretapi.DefaultKeyGen.Aes128()
	if err != nil {
		t.Fatal(err)
	}

	if err := keyStorage.StoreL2DataKey(l1key, "test_case_data_key", secretapi.KeyAES128, key); err != nil {
		t.Fatal(err)
	}

	if err := keyStorage.StoreL2DataKey(l1key, l2key, secretapi.KeyAES128, key); err != nil {
		t.Fatal(err)
	}
	if err := keyStorage.StoreL2DataKey(l1key, l2key, secretapi.KeyAES128, key); err != nil {
		t.Fatal(err)
	}
}

func TestPostgresKeyStorage_FetchL2DataKey(t *testing.T) {
	keyStorage := InitTestKeyStorage(t)
	keyId, kt, key, err := keyStorage.FetchL2DataKey("test_case_data_key")
	if err != nil {
		t.Fatal(err)
	}
	if keyId == 0 {
		t.Fatal("key id is zero")
	}
	if kt != secretapi.KeyAES128 {
		t.Fatal("wrong key type")
	}
	if len(key) != 128/8 {
		t.Fatal("wrong key length")
	}
	t.Log(string(key))
}
